@page "/fordon"
@using Car_Rental.Common.Interfaces;


@inject BookingProcessor pb

<!-- Registrera ny -->
@if (alertCustomer)
{
    <div class="alert alert-warning" role="alert">Gick inte att registrera kund!
        <button type="button" class="btn-close float-end" @onclick="CloseAlertCustomer"></button>
    </div>

}



<!-- Registrera ny kund -->


<div class="modal fade" id="exampleModalCustomer" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">

    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Registrera ny kund</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body mb-2">
                <form>
                    <div class="mb-3">
                        <label for="förnamnInput" class="form-label">Förnamn</label>
                        <input type="text" class="form-control" id="förnamnInput" @bind="fName">
                    </div>
                    <div class="mb-3">
                        <label for="efternamnInput" class="form-label">Efternamn</label>
                        <input type="text" class="form-control" id="efternamnInput" @bind="lName">
                    </div>
                    <div class="mb-3">
                        <label for="SSNInput" class="form-label">SSN</label>
                        <input type="text" class="form-control" id="SSNInput" @bind="Ssn">
                    </div>

                </form>
            </div>
            <div class="modal-footer">

                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" @onclick="AddCustomer">registrera ny</button>
            </div>
        </div>
    </div>
</div>



@if(alert) 
{
    <div class="alert alert-warning" role="alert">
        Gick inte att registrera fordon!
        <button type="button" class="btn-close float-end" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
    
}


<!--Modal knapp+modal-->
<div>
    <button type="button" class="btn btn-primary mb-5" data-bs-toggle="modal" data-bs-target="#exampleModal">
        Registrera nytt fordon
    </button>
    <button type="button" class="btn btn-primary mb-5" data-bs-toggle="modal" data-bs-target="#exampleModalCustomer">
        Registrera ny kund
    </button>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">

    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Registrera nytt fordon</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body mb-2">
                <form>
                    <div class="mb-3">
                        <label for="fornamnInput" class="form-label">Make</label>
                        <input type="text" class="form-control" id="fornamnInput" @bind="make">
                    </div>
                    <div class="mb-3">
                        <label for="costDay" class="form-label">costDay</label>
                        <input type="text" class="form-control" id="costDay" @bind="costDay">
                    </div>
                    <div class="mb-3">
                        <label for="OdometerInput" class="form-label">Odometer</label>
                        <input type="text" class="form-control" id="OdometerInput" @bind="odometer">
                    </div>
                    <div class="mb-3">
                        <label for="CostKMInput" class="form-label">costKM</label>
                        <input type="text" class="form-control" id="CostKMInput" @bind="costKM">
                    </div>
                    <div class="mb-3">
                        <label for="regInput" class="form-label">Registration number</label>
                        <input type="text" class="form-control" id="regInput" @bind="regNo">
                    </div>
                    <div>
                        <label for="VehicleSelect" class="form-label">Vehicle type</label>
                        <select class="form-select" id="VehicleSelect" aria-label="Default select example" @bind="vehicleType">
                            <option>Select vehicle type</option>
                            @foreach(var a in pb.GetVehicleTypes())
                            {
                                <option value="@a">@a</option>
                            }

                        </select>
                    </div>

                </form>
            </div>
            <div class="modal-footer">

                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SubmitVehicle">registrera ny</button>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="form-group col-2 me-5">
        <label for="priceRange">Max Cost/day</label>
        <input type="range" class="form-range" id="priceRange" min="@minCost" max="@maxCost" step="100" @bind="costDayFilter" @oninput="UpdatePrice" />

        <span class="badge bg-primary">@costDayFilter</span>
    </div>
    <div class="form-group col-2">
        <label for="priceRange">Max Odometer</label>
        <input type="range" class="form-range" id="priceRange" min="@minOdometer" max="@maxOdometer" step="100" @bind="odometerFilter" @oninput="UpdateOdometer" />

        <span class="badge bg-primary">@odometerFilter</span>


    </div>
    <div class="col"></div>


</div>

<hr />

<!--Vehicle Table-->
<div class="@((isDisabled) ? "car-disable" : "")">

    @if (isDisabled)
    {
        <div class="spinner-overlay">
            <div class="d-flex justify-content-center">
                <div class="spinner-border spinner-size text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    <table class="table table-striped">
        <thead>
            <tr >
                <th>RegNo.</th>
                <th>Make</th>
                <th>Odometer</th>
                <th>cost/day</th>
                <th>cost/KM</th>
                <th>Action</th>
                
                   
                
            </tr>
        </thead>
        <tbody>

            @foreach (var a in pb.GetFilteredVehicles(costDayFilter, odometerFilter)) 
            /* en metod på denna 
            razorsida som man använder istället. olika lamda för olika input.
            kan vara t.ex 1 för "CostDay". med parametrar som bestämmer vad get metoden ska filtrera.
            kanske Enums?

            */
            {



                <tr class="align-middle">
                    <td>
                        @a.regNo
                    @if (a.VehicleType == VehicleTypes.Van || a.VehicleType == VehicleTypes.Combi || a.VehicleType == VehicleTypes.Sedan)
                    {
                            <img src="icons/car.png" style="width: 25px"  class="ms-2" />

                           
                    }
                    else
                    {
                            <img src="icons/transportation.png" style="width: 23px" class="ms-2" />
                    }

                    </td>
                    <td>@a.make</td>
                    <td>@a.odometer</td>
                    <td>@a.costDay</td>
                    <td>@a.costKM</td>
                    @if (a.available)
                    {
                        <td>
                            <select class="form-select" aria-label="Default select example" @bind="a.SelectedCustomerId">
                                <option value="" disabled selected>Select a customer</option>
                                @foreach (var b in pb.GetPersons())
                                {
                                    <option value="@b.CustomerId">@b.FirstName @b.LastName</option>
                                }
                                
                            </select>
                        </td>
                        <td><button type="button" class="btn btn-primary btn-sm" @onclick="() => SubmitBookingAsync(a.SelectedCustomerId, a)">Order</button></td>
                    }
                    else
                    {
                        <td>

                            <input type="text" class="form-control @(a.RedFlagReturn ? "red-outline" : "")" placeholder="Odometer on return" @bind="a.OdometerReturned" @onclick="() => ClearError(a)" />
                        </td>
                        <td><button type="button" class="btn btn-success btn-sm mt-1" @onclick="(() => ReturnVehicle(a.regNo, a.OdometerReturned))">Return</button></td>
                    }

                </tr>
               
            }


        </tbody>
    </table>
</div> 



<h3 class="mt-5">Bookings</h3>

<div>

    <table class="table float-left table-striped">
        <thead>
            <tr>
                <th>RegNo</th>
                <th>Customer</th>
                <th>KM Rented</th>
                <th>KM Returned</th>
                <th>rented</th>
                <th>returned</th>
                <th>Cost</th>
                <th>Status</th> 

            </tr>
        </thead>
        <tbody>


            @foreach (var a in pb.GetBookings())
            {
                <tr>
                    <td>@a.Vehicle.regNo</td>
                    <td>@a.Customer.LastName @a.Customer.FirstName (@a.Customer.Ssn)</td>
                    <td>@a.KMRented</td>
                    <td>@a.KMReturned</td>
                    <td>@a.BookingDate</td>
                    <td>@a.BookingReturned</td>
                    <td>@a.TotalCost</td>

                    @if(a.Status == false)
                    {
                        <td><span class="badge bg-warning">Active</span></td>
                    }
                    else
                    {
                       <td><span class="badge bg-success">Closed</span></td>

                    }
                   

                </tr>
            }


        </tbody>
    </table>

</div>





@code 
{
 
    #region LOKALA VARIABLER

    // bools
    bool isDisabled = false;
    bool alertCustomer = false;
    bool alert = false;
    private bool isError = false;

    // add Customer
    private string? lName = null;
    private string? fName = null;
    private int? CustomerId = null;
    private int? Ssn = null;

    // lamda-filter (getVehicles)
    int maxCost;
    int minCost;
    int costDayFilter;
    int maxOdometer;
    int minOdometer;
    int odometerFilter;

    // add vehicle
    public int? costDay;
    public int? costKM;
    public int? odometer;
    public string? regNo;
    public string? make;
    VehicleTypes? vehicleType;

    #endregion 

    private void AddCustomer()
    {
        if (lName is not null && 
            fName is not null && 
            Ssn is not null)
        {

            var newCustomer = pb.CreateCustomer(lName, fName, Ssn);

            pb.AddCustomer(newCustomer);
            lName = "";
            fName = "";
            Ssn = null;
            alertCustomer = false;

        }
        else
        {
            alertCustomer = true;
        }


    }


    // Close alert metoder
    private void CloseAlertCustomer()
    {
        alertCustomer = false;
    }
    void CloseAlert()
    {
        alert = false;
    }


    // Få max/min-värden för range filter 
    protected override void OnInitialized()
    {
        var max = pb.GetVehicles().OrderByDescending(c => c.costDay).FirstOrDefault();
        maxCost = max != null? Convert.ToInt32(max.costDay): 100;
        var min = pb.GetVehicles().OrderBy(c => c.costDay).FirstOrDefault();
        minCost = min != null ? Convert.ToInt32(min.costDay) : 0;

        costDayFilter = maxCost;

        var maxOdo = pb.GetVehicles().OrderByDescending(o => o.odometer).FirstOrDefault();
        maxOdometer = maxOdo != null ? Convert.ToInt32(maxOdo.odometer) : 100;
        var minOdo = pb.GetVehicles().OrderBy(o => o.odometer).FirstOrDefault();
        minOdometer = minOdo != null ? Convert.ToInt32(minOdo.odometer) : 100;

        odometerFilter = maxOdometer;

    }

    // metod för price range-input
    private void UpdatePrice(ChangeEventArgs? price)
    {
        if (price != null && price.Value != null)
        {
            int.TryParse(price.Value.ToString(), out costDayFilter);
        }

    }

    //metod för odometer range-input
    private void UpdateOdometer(ChangeEventArgs? odometer)
    {
        if (odometer != null && odometer.Value != null)
        {
            int.TryParse(odometer.Value.ToString(), out odometerFilter);
        }

    }


    private void SubmitVehicle()
    {
        alert = false;
        if (costDay != null &&
            costKM != null &&
            odometer != null &&
            regNo != null &&
            make != null &&
            vehicleType != null)

        {


            if (vehicleType == VehicleTypes.Sedan || vehicleType == VehicleTypes.Van || vehicleType == VehicleTypes.Combi)
            {

                pb.AddVehicle(BookingProcessor.CreateCar(costDay, costKM, odometer, regNo, make, true, vehicleType));

                costDay = null;
                costKM = null;
                odometer = null;
                regNo = null;
                make = null;
                vehicleType = null;


            }
            else if (vehicleType == VehicleTypes.Motorcycle)
            {
                pb.AddVehicle(BookingProcessor.CreateMotorcycle(costDay, costKM, odometer, regNo, make, true, vehicleType));
                costDay = null;
                costKM = null;
                odometer = null;
                regNo = null;
                make = null;
                vehicleType = null;

            }


        }
        else
        {
            costDay = null;
            costKM = null;
            odometer = null;
            regNo = null;
            make = null;
            vehicleType = null;
            alert = true;

        }


    }

    private async void SubmitBookingAsync(int? customerId, IVehicle car)
    {

        isDisabled = true;

        var bookingCustomer = pb.GetCustomer(customerId);

        var booking = await pb.CreateBookingAsync(bookingCustomer, car);

        pb.AddBooking(booking);

        car.available = false;

        isDisabled = false;

        StateHasChanged();


    }

    

    private void ReturnVehicle(string vehicle, int? odometerReturn)
    {
        Vehicle car1 = pb.GetVehicle(vehicle);
        if(odometerReturn > car1.odometer && odometerReturn is not null)
        {
            pb.ReturnVehicle(vehicle, odometerReturn);
        }
        else
        {
            car1.RedFlagReturn = true;
        }

        car1.OdometerReturned = null;
        var maxOdo = pb.GetVehicles().OrderByDescending(o => o.odometer).FirstOrDefault();
        maxOdometer = maxOdo != null ? Convert.ToInt32(maxOdo.odometer) : 100;

        odometerFilter = maxOdometer;



    }
    private void ClearError(IVehicle a)
    {
        a.RedFlagReturn = false;
    }

}
